plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id 'org.ajoberstar.grgit' version '5.0.0'
}

loom {
    accessWidenerPath = file("src/main/resources/rcutil.accesswidener")
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "${project.mod_version}-mc1.19.2+${buildMetadata()}"
group = project.maven_group

def buildMetadata() {
    def ci_build = System.getenv("GITHUB_RUN_NUMBER")
    if (ci_build != null) {
        return "build.${ci_build}"
    } else if (grgit != null) {
        def commit_hash = grgit.head().abbreviatedId
        if (grgit.status().clean) {
            return "rev.${commit_hash}"
        } else {
            return "rev.${commit_hash}.dirty"
        }
    } else {
        return "unknown"
    }
}

repositories {
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    Set<String> apiModules = [
        "fabric-command-api-v2",
        "fabric-events-interaction-v0",
        "fabric-lifecycle-events-v1",
        "fabric-particles-v1"
    ]
    apiModules.forEach {
        include(modImplementation(fabricApi.module(it, "${project.fabric_version}")))
    }

    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'io.netty:netty-all:4.1.79.Final'
    implementation 'com.google.guava:guava:31.1-jre'
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    exclude "assets/rcutil/icon.kra"
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
    }
}

task buildPython {
    doLast {
        exec {
            workingDir "${projectDir}"
            executable 'poetry'
            args 'build'
        }
    }
}

tasks.findByName('build').dependsOn 'buildPython'

task extract() {
    doLast {
        exec {
            workingDir "${buildDir}"
            executable 'bash'
            args '-c', """find ${projectDir}/src/main/java/ -iname \"*.java\" | \
            xargs xgettext -kI18n.t:1 -kI18n.t:2 -kI18n.overlay:2 -kI18n.overlayError:2 \
            -kI18n.send:2 -kI18n.sendError:2"""
        }
    }
}
