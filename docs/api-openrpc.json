{
    "openrpc": "1.2.6",
    "info": {
        "version": "0.2.0",
        "title": "redstone-computer-utilities JSON-RPC API",
        "description": "APIs for redstone-computer-utilities scripts."
    },
    "servers": [
        {
            "name": "default server",
            "url": "localhost:37265"
        }
    ],
    "methods": [
        {
            "name": "registerScript",
            "summary": "Register the script.",
            "description": "The parameter `callback` will be called as callback of event `onScriptRegister` during the registration process.",
            "tags": [
                {
                    "name": "Script"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/script"
                },
                {
                    "$ref": "#/components/contentDescriptors/description"
                },
                {
                    "$ref": "#/components/contentDescriptors/permissionLevel"
                },
                {
                    "$ref": "#/components/contentDescriptors/callback"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/IllegalName"
                },
                {
                    "$ref": "#/components/errors/NameExists"
                },
                {
                    "$ref": "#/components/errors/InvalidPermissionLevel"
                }
            ]
        },
        {
            "name": "deregisterScript",
            "summary": "Deregister the script.",
            "tags": [
                {
                    "name": "Script"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "listScript",
            "summary": "List registered scripts.",
            "tags": [
                {
                    "name": "Script"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "name": "scripts",
                "schema": {
                    "type": "object",
                    "patternProperties": {
                        "^[A-Za-z0-9_]+$": {
                            "type": "object",
                            "properties": {
                                "description": {
                                    "type": "string"
                                },
                                "permissionLevel": {
                                    "type": "integer",
                                    "minimum": 2,
                                    "maximum": 4
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "invokeScript",
            "summary": "Invoke the script.",
            "tags": [
                {
                    "name": "Script"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/script"
                },
                {
                    "$ref": "#/components/contentDescriptors/args"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/any"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptNotFound"
                },
                {
                    "$ref": "#/components/errors/IllegalArgument"
                },
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                },
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "registerCallback",
            "summary": "Register the event callback.",
            "description": "Only one callback can be registered for the same event with the same param within the script.",
            "tags": [
                {
                    "name": "EventCallback"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/event"
                },
                {
                    "$ref": "#/components/contentDescriptors/callback"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/EventNotFound"
                },
                {
                    "$ref": "#/components/errors/EventCallbackAlreadyRegistered"
                },
                {
                    "$ref": "#/components/errors/InterfaceNotFound"
                },
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "deregisterCallback",
            "summary": "Deregister the event callback.",
            "tags": [
                {
                    "name": "EventCallback"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/event"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/EventNotFound"
                },
                {
                    "$ref": "#/components/errors/EventCallbackNotRegistered"
                },
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "listCallback",
            "summary": "(experimental) List registered event callbacks of the script.",
            "tags": [
                {
                    "name": "EventCallback"
                },
                {
                    "name": "Experimental"
                }
            ],
            "deprecated": true,
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/script"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "name": "events",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "param": {
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "integer"
                                    }
                                ]
                            }
                        },
                        "additionalProperties": false
                    }
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptNotFound"
                },
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "invokeCallback",
            "summary": "(experimental) Invoke the event callback of the script.",
            "tags": [
                {
                    "name": "EventCallback"
                },
                {
                    "name": "Experimental"
                }
            ],
            "deprecated": true,
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/script"
                },
                {
                    "$ref": "#/components/contentDescriptors/event"
                },
                {
                    "$ref": "#/components/contentDescriptors/args"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/any"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptNotFound"
                },
                {
                    "$ref": "#/components/errors/EventNotFound"
                },
                {
                    "$ref": "#/components/errors/EventCallbackNotRegistered"
                },
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                },
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "newInterface",
            "summary": "Create an interface.",
            "tags": [
                {
                    "name": "Interface"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/interface"
                },
                {
                    "$ref": "#/components/contentDescriptors/world"
                },
                {
                    "$ref": "#/components/contentDescriptors/lsb"
                },
                {
                    "$ref": "#/components/contentDescriptors/increment"
                },
                {
                    "$ref": "#/components/contentDescriptors/size"
                },
                {
                    "$ref": "#/components/contentDescriptors/args"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/IllegalName"
                },
                {
                    "$ref": "#/components/errors/NameExists"
                },
                {
                    "$ref": "#/components/errors/BlockNotTarget"
                },
                {
                    "$ref": "#/components/errors/IllegalArgument"
                },
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "removeInterface",
            "summary": "Remove the interface.",
            "tags": [
                {
                    "name": "Interface"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/interface"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InterfaceNotFound"
                },
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "listInterface",
            "summary": "List interfaces.",
            "tags": [
                {
                    "name": "Interface"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "name": "interfaces",
                "schema": {
                    "type": "object",
                    "patternProperties": {
                        "^[A-Za-z0-9_]+$": {
                            "type": "object",
                            "properties": {
                                "world": {
                                    "type": "string"
                                },
                                "lsb": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer"
                                    },
                                    "minLength": 3,
                                    "maxLength": 3
                                },
                                "increment": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer"
                                    },
                                    "minLength": 3,
                                    "maxLength": 3
                                },
                                "size": {
                                    "type": "integer",
                                    "minimum": 1
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "readInterface",
            "summary": "Read from the interface.",
            "tags": [
                {
                    "name": "Interface"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/interface"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/data"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InterfaceNotFound"
                },
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "writeInterface",
            "summary": "Write to the interface.",
            "tags": [
                {
                    "name": "Interface"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/interface"
                },
                {
                    "$ref": "#/components/contentDescriptors/data"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InterfaceNotFound"
                },
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "gametime",
            "summary": "Get current monotonic world time of the overworld in gametick.",
            "description": "Guaranteed to return the same value as player executes `/time query gametime` in the same gametick. Also guaranteed to return the same value when called from callbacks of event onGametickStart and onGametickEnd in the same gametick.",
            "tags": [
                {
                    "name": "Miscellaneous"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/gametime"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "listPlayer",
            "summary": "(experimental) List online players.",
            "tags": [
                {
                    "name": "Miscellaneous"
                },
                {
                    "name": "Experimental"
                }
            ],
            "deprecated": true,
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "name": "players",
                "schema": {
                    "type": "object",
                    "patternProperties": {
                        "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "permissionLevel": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "maximum": 4
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "info",
            "summary": "Log the message as information.",
            "tags": [
                {
                    "name": "Logging"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/message"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "warn",
            "summary": "Log the message as warning.",
            "tags": [
                {
                    "name": "Logging"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/message"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "error",
            "summary": "Log the message as error.",
            "tags": [
                {
                    "name": "Logging"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/message"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "sendInfo",
            "summary": "Send the message as information to the player.",
            "tags": [
                {
                    "name": "Logging"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/uuid"
                },
                {
                    "$ref": "#/components/contentDescriptors/message"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/PlayerNotFound"
                },
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "sendWarn",
            "summary": "Send the message as warning to the player.",
            "tags": [
                {
                    "name": "Logging"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/uuid"
                },
                {
                    "$ref": "#/components/contentDescriptors/message"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/PlayerNotFound"
                },
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        },
        {
            "name": "sendError",
            "summary": "Send the message as error to the player.",
            "tags": [
                {
                    "name": "Logging"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/uuid"
                },
                {
                    "$ref": "#/components/contentDescriptors/message"
                },
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/PlayerNotFound"
                },
                {
                    "$ref": "#/components/errors/InvalidAuthKey"
                }
            ]
        }
    ],
    "components": {
        "contentDescriptors": {
            "null": {
                "name": "null",
                "required": true,
                "schema": {
                    "type": "null"
                }
            },
            "any": {
                "name": "any",
                "required": true,
                "schema": true
            },
            "integerResult": {
                "name": "result",
                "summary": "Integer result.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "authKey": {
                "name": "authKey",
                "summary": "Authorization key.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "script": {
                "name": "script",
                "summary": "Name of the script.",
                "description": "MUST be unique among all registered scripts and MUST be a string consists of only letters, numbers and underlines.",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "^[A-Za-z0-9_]+$"
                }
            },
            "description": {
                "name": "description",
                "summary": "Description of the script.",
                "description": "SHOULD be any unicode string that can be displayed as plain text in Minecraft.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "permissionLevel": {
                "name": "permissionLevel",
                "summary": "Permission level required to run the script.",
                "description": "MUST be an integer >= 2 and <= 4.",
                "required": true,
                "schema": {
                    "type": "integer",
                    "minimum": 2,
                    "maximum": 4
                }
            },
            "event": {
                "name": "event",
                "summary": "Name and additional parameter of the event.",
                "required": true,
                "schema": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "param": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            },
            "callback": {
                "name": "callback",
                "summary": "Name of the method called when event occurs.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "args": {
                "name": "args",
                "summary": "Arguments to invoke the script.",
                "required": true,
                "schema": {
                    "anyOf": [
                        {
                            "type": "object"
                        }
                    ]
                }
            },
            "interface": {
                "name": "interface",
                "summary": "Name of the interface.",
                "description": "MUST be unique among all interfaces and MUST be a string consists of only letters, numbers and underlines.",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "^[A-Za-z0-9_]+$"
                }
            },
            "data": {
                "name": "data",
                "summary": "Data to be read or written.",
                "description": "In little-endian bytes encoded with base64.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "message": {
                "name": "message",
                "summary": "Message to be logged.",
                "description": "SHOULD be any unicode string that can be displayed as plain text in Minecraft.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "uuid": {
                "name": "uuid",
                "summary": "UUID of the player.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "gametime": {
                "name": "gametime",
                "summary": "Monotonic world time of the overworld in gametick.",
                "required": true,
                "schema": {
                    "type": "integer",
                    "description": "64-bit integer."
                }
            },
            "interval": {
                "name": "interval",
                "summary": "Interval in gametick.",
                "required": true,
                "schema": {
                    "type": "integer",
                    "description": "Positive 64-bit integer."
                }
            },
            "blockPos": {
                "name": "blockPos",
                "summary": "Position of the block.",
                "required": true,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "minLength": 3,
                    "maxLength": 3
                }
            },
            "world": {
                "name": "world",
                "summary": "Identifier of the world.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "lsb": {
                "name": "lsb",
                "summary": "Position of the lsb of the interface.",
                "required": true,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "minLength": 3,
                    "maxLength": 3
                }
            },
            "increment": {
                "name": "increment",
                "summary": "Difference between each two neighbor blocks of the interface.",
                "required": true,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "minLength": 3,
                    "maxLength": 3
                }
            },
            "size": {
                "name": "size",
                "summary": "Size of the interface.",
                "required": true,
                "schema": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "errors": {
            "InvalidAuthKey": {
                "code": -1,
                "message": "Invalid authorization key"
            },
            "IllegalName": {
                "code": -2,
                "message": "Illegal name"
            },
            "NameExists": {
                "code": -3,
                "message": "Target with the name already exists"
            },
            "InvalidPermissionLevel": {
                "code": -4,
                "message": "Invalid permission level"
            },
            "ScriptNotFound": {
                "code": -5,
                "message": "Script cannot be found"
            },
            "IllegalArgument": {
                "code": -6,
                "message": "Illegal argument"
            },
            "ScriptInternalError": {
                "code": -7,
                "message": "Script internal error"
            },
            "EventNotFound": {
                "code": -8,
                "message": "Event cannot be found"
            },
            "EventCallbackAlreadyRegistered": {
                "code": -9,
                "message": "Event callback is already registered"
            },
            "EventCallbackNotRegistered": {
                "code": -10,
                "message": "Event callback is not registered"
            },
            "AccessDenied": {
                "code": -11,
                "message": "Access denied"
            },
            "InterfaceNotFound": {
                "code": -12,
                "message": "Interface cannot be found"
            },
            "PlayerNotFound": {
                "code": -13,
                "message": "Player cannot be found"
            },
            "WorldNotFound": {
                "code": -14,
                "message": "World cannot be found"
            },
            "InvalidSize": {
                "code": -15,
                "message": "Invalid size"
            },
            "BlockNotTarget": {
                "code": -16,
                "message": "Non-target block is found in the interface"
            }
        }
    }
}