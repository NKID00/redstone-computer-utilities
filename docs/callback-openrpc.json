{
    "openrpc": "1.2.6",
    "info": {
        "version": "0.2.0",
        "title": "redstone-computer-utilities JSON-RPC Callback",
        "description": "Event callbacks for redstone-computer-utilities scripts."
    },
    "methods": [
        {
            "name": "onScriptRegister",
            "summary": "Called when the scripts is almost registered.",
            "description": "Registered with registerScript and cannot be registered with registerCallback. Error response will be considered failure of the registration process",
            "tags": [
                {
                    "name": "ScriptLifecycle"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/authKey"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                }
            ]
        },
        {
            "name": "onScriptReload",
            "summary": "Called when `/rcu reload` is executed.",
            "tags": [
                {
                    "name": "ScriptLifecycle"
                }
            ],
            "paramStructure": "by-name",
            "params": [],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                }
            ]
        },
        {
            "name": "onScriptRun",
            "summary": "Called when `/rcu run` is executed.",
            "tags": [
                {
                    "name": "ScriptLifecycle"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/uuid"
                },
                {
                    "$ref": "#/components/contentDescriptors/args"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/integerResult"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/IllegalArgument"
                },
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                },
                {
                    "$ref": "#/components/errors/AccessDenied"
                }
            ]
        },
        {
            "name": "onScriptInvoke",
            "summary": "Called when invoked by another script.",
            "tags": [
                {
                    "name": "ScriptLifecycle"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/script"
                },
                {
                    "$ref": "#/components/contentDescriptors/args"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/any"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/IllegalArgument"
                },
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                },
                {
                    "$ref": "#/components/errors/AccessDenied"
                }
            ]
        },
        {
            "name": "onGametickStart",
            "summary": "Called at the start of every gametick.",
            "tags": [
                {
                    "name": "Gametick"
                }
            ],
            "paramStructure": "by-name",
            "params": [],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                }
            ]
        },
        {
            "name": "onGametickEnd",
            "summary": "Called at the end of every gametick.",
            "tags": [
                {
                    "name": "Gametick"
                }
            ],
            "paramStructure": "by-name",
            "params": [],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                }
            ]
        },
        {
            "name": "onGametickStartDelay",
            "summary": "Called only once at the start of the gametick after delay interval.",
            "description": "registerCallback param: #/components/contentDescriptors/interval",
            "tags": [
                {
                    "name": "Gametick"
                }
            ],
            "paramStructure": "by-name",
            "params": [],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                }
            ]
        },
        {
            "name": "onGametickEndDelay",
            "summary": "Called only once at the end of the gametick after delay interval.",
            "description": "registerCallback param: #/components/contentDescriptors/interval",
            "tags": [
                {
                    "name": "Gametick"
                }
            ],
            "paramStructure": "by-name",
            "params": [],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                }
            ]
        },
        {
            "name": "onGametickStartClock",
            "summary": "Called at the start of the gametick for every clock cycle.",
            "description": "registerCallback param: #/components/contentDescriptors/interval",
            "tags": [
                {
                    "name": "Gametick"
                }
            ],
            "paramStructure": "by-name",
            "params": [],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                }
            ]
        },
        {
            "name": "onGametickEndClock",
            "summary": "Called at the end of the gametick for every clock cycle.",
            "description": "registerCallback param: #/components/contentDescriptors/interval",
            "tags": [
                {
                    "name": "Gametick"
                }
            ],
            "paramStructure": "by-name",
            "params": [],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                }
            ]
        },
        {
            "name": "onInterfaceRedstoneUpdate",
            "summary": "Called at the end of the gametick when redstone signal received by the interface is changed.",
            "description": "registerCallback param: #/components/contentDescriptors/interface",
            "tags": [
                {
                    "name": "Interface"
                }
            ],
            "paramStructure": "by-name",
            "params": [],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                }
            ]
        },
        {
            "name": "onInterfaceRead",
            "summary": "Called when the interface is read successfully by the script. param=interface",
            "description": "registerCallback param: #/components/contentDescriptors/interface",
            "tags": [
                {
                    "name": "Interface"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/script"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                }
            ]
        },
        {
            "name": "onInterfaceWrite",
            "summary": "Called when the interface is written successfully by the script.",
            "description": "registerCallback param: #/components/contentDescriptors/interface",
            "tags": [
                {
                    "name": "Interface"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/script"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                }
            ]
        },
        {
            "name": "onInterfaceNew",
            "summary": "(experimental) Called when an interface is created successfully.",
            "tags": [
                {
                    "name": "Interface"
                }
            ],
            "paramStructure": "by-name",
            "params": [
                {
                    "$ref": "#/components/contentDescriptors/interface"
                }
            ],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                }
            ]
        },
        {
            "name": "onInterfaceRemove",
            "summary": "(experimental) Called when the interface is removed successfully.",
            "description": "registerCallback param: #/components/contentDescriptors/interface",
            "tags": [
                {
                    "name": "Interface"
                }
            ],
            "paramStructure": "by-name",
            "params": [],
            "result": {
                "$ref": "#/components/contentDescriptors/null"
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ScriptInternalError"
                }
            ]
        }
    ],
    "components": {
        "contentDescriptors": {
            "null": {
                "name": "null",
                "required": true,
                "schema": {
                    "type": "null"
                }
            },
            "any": {
                "name": "any",
                "required": true,
                "schema": true
            },
            "integerResult": {
                "name": "result",
                "summary": "Integer result.",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "authKey": {
                "name": "authKey",
                "summary": "Authorization key.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "script": {
                "name": "script",
                "summary": "Name of the script.",
                "description": "MUST be unique among all registered scripts and MUST be a string consists of only letters, numbers and underlines.",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "^[A-Za-z0-9_]+$"
                }
            },
            "description": {
                "name": "description",
                "summary": "Description of the script.",
                "description": "SHOULD be any unicode string that can be displayed as plain text in Minecraft.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "permissionLevel": {
                "name": "permissionLevel",
                "summary": "Permission level required to run the script.",
                "description": "MUST be a integer >= 2 and <= 4.",
                "required": true,
                "schema": {
                    "type": "integer",
                    "minimum": 2,
                    "maximum": 4
                }
            },
            "event": {
                "name": "event",
                "summary": "Name and additional parameter of the event.",
                "required": true,
                "schema": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "param": {
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            },
            "callback": {
                "name": "callback",
                "summary": "Name of the method called when event occurs.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "args": {
                "name": "args",
                "summary": "Arguments to invoke the script.",
                "required": true,
                "schema": {
                    "anyOf": [
                        {
                            "type": "object"
                        }
                    ]
                }
            },
            "interface": {
                "name": "interface",
                "summary": "Name of the interface.",
                "description": "MUST be unique among all interfaces and MUST be a string consists of only letters, numbers and underlines.",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "^[A-Za-z0-9_]+$"
                }
            },
            "data": {
                "name": "data",
                "summary": "Data to be read or written.",
                "description": "In little-endian bytes encoded with base64.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "message": {
                "name": "message",
                "summary": "Message to be logged.",
                "description": "SHOULD be any unicode string that can be displayed as plain text in Minecraft.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "uuid": {
                "name": "uuid",
                "summary": "UUID of the player.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "gametime": {
                "name": "gametime",
                "summary": "Monotonic world time of the overworld in gametick.",
                "required": true,
                "schema": {
                    "type": "integer",
                    "description": "64-bit integer."
                }
            },
            "interval": {
                "name": "interval",
                "summary": "Interval in gametick.",
                "required": true,
                "schema": {
                    "type": "integer",
                    "description": "Positive 64-bit integer."
                }
            },
            "blockPos": {
                "name": "blockPos",
                "summary": "Position of the block.",
                "required": true,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "minLength": 3,
                    "maxLength": 3
                }
            },
            "world": {
                "name": "world",
                "summary": "Identifier of the world.",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "first": {
                "name": "first",
                "summary": "Position of the first block of the interface.",
                "required": true,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "minLength": 3,
                    "maxLength": 3
                }
            },
            "increment": {
                "name": "increment",
                "summary": "Difference between each two neighbor blocks of the interface.",
                "required": true,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "minLength": 3,
                    "maxLength": 3
                }
            },
            "size": {
                "name": "size",
                "summary": "Size of the interface.",
                "required": true,
                "schema": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "errors": {
            "InvalidAuthKey": {
                "code": -1,
                "message": "Invalid authorization key"
            },
            "IllegalName": {
                "code": -2,
                "message": "Illegal name"
            },
            "NameExists": {
                "code": -3,
                "message": "Target with the name already exists"
            },
            "InvalidPermissionLevel": {
                "code": -4,
                "message": "Invalid permission level"
            },
            "ScriptNotFound": {
                "code": -5,
                "message": "Script cannot be found"
            },
            "IllegalArgument": {
                "code": -6,
                "message": "Illegal argument"
            },
            "ScriptInternalError": {
                "code": -7,
                "message": "Script internal error"
            },
            "EventNotFound": {
                "code": -8,
                "message": "Event cannot be found"
            },
            "EventCallbackAlreadyRegistered": {
                "code": -9,
                "message": "Event callback is already registered"
            },
            "EventCallbackNotRegistered": {
                "code": -10,
                "message": "Event callback is not registered"
            },
            "AccessDenied": {
                "code": -11,
                "message": "Access denied"
            },
            "InterfaceNotFound": {
                "code": -12,
                "message": "Interface cannot be found"
            },
            "PlayerNotFound": {
                "code": -13,
                "message": "Player cannot be found"
            },
            "WorldNotFound": {
                "code": -14,
                "message": "World cannot be found"
            }
        }
    }
}